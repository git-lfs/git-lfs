// Generated by: gen, modified by Steve Streeting
// TypeWriter: container
// Directive: +gen on main.string

// See http://clipperhouse.github.io/gen for documentation

// Set is a modification of https://github.com/deckarep/golang-set
// The MIT License (MIT)
// Copyright (c) 2013 Ralph Caraveo (deckarep@gmail.com)
package tools

// The primary type that represents a set
type StringSet map[string]struct{}

// Creates and returns a reference to an empty set.
func NewStringSet() StringSet {
	return make(StringSet)
}

// Creates and returns a reference to an empty set with a capacity.
func NewStringSetWithCapacity(capacity int) StringSet {
	return make(StringSet, capacity)
}

// Creates and returns a reference to a set from an existing slice
func NewStringSetFromSlice(s []string) StringSet {
	a := NewStringSetWithCapacity(len(s))
	for _, item := range s {
		a.Add(item)
	}
	return a
}

// Adds an item to the current set if it doesn't already exist in the set.
func (set StringSet) Add(i string) bool {
	_, found := set[i]
	set[i] = struct{}{}
	return !found //False if it e  xisted already
}

// Determines if a given item is already in the set.
func (set StringSet) Contains(i string) bool {
	_, found := set[i]
	return found
}

// Iter() returns a channel of type string that you can range over.
func (set StringSet) Iter() <-chan string {
	ch := make(chan string)
	go func() {
		for elem := range set {
			ch <- elem
		}
		close(ch)
	}()

	return ch
}
